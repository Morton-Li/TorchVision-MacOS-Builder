name: Build TorchVision

on:
  workflow_dispatch:  # 手动触发

env:
  VERSION: "0.24.0"  # TorchVision 版本号
  TORCH_VERSION: "2.9.0"  # PyTorch 版本号

jobs:
  build:
    runs-on: macos-15-intel
    strategy:
      matrix:
        python_version: [ 3.11, 3.12, 3.13 ]
    name: Build TorchVision for Python ${{ matrix.python_version }}
    steps:
      - name: Restore TorchVision source from cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: vision
          key: vision-v${{ env.VERSION }}

      - name: Clone TorchVision repo
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 --branch "v${{ env.VERSION }}" --recursive https://github.com/pytorch/vision.git vision
          git -C vision submodule update --init --recursive --depth 1 || git -C vision submodule update --init --recursive --depth 10 || git -C vision submodule update --init --recursive

      - name: Save TorchVision source to cache
        id: cache-save
        if: steps.restore-cache.outputs.cache-hit != 'true' && matrix.python_version == '3.12'
        uses: actions/cache/save@v4
        with:
          path: vision
          key: vision-v${{ env.VERSION }}

      - name: Build wheel
        env:
          BUILD_VERSION: ${{ env.VERSION }}  # TorchVision 版本号
          # TORCH_VERSION: ${{ env.TORCH_VERSION }}  # PyTorch 版本号
          CMAKE_OSX_ARCHITECTURES: "x86_64"  # 架构（仅使用变量以便后续引用，对编译无影响）
          MACOSX_DEPLOYMENT_TARGET: "11.0"  # 最低支持的 macOS 版本（仅使用变量以便后续引用，对编译无影响）
        run: |
          set -e
          brew install jpeg
          sudo xcode-select --switch /Applications/Xcode_16.4.app

          export MAX_JOBS=$(sysctl -n hw.logicalcpu)
          if [ "$MAX_JOBS" -gt 4 ]; then
              export MAX_JOBS=4
          fi
          export TORCHVISION_INCLUDE="/usr/local/opt/jpeg/include"
          export TORCHVISION_LIBRARY="/usr/local/opt/jpeg/lib"

          export _PYTHON_HOST_PLATFORM="macosx-$MACOSX_DEPLOYMENT_TARGET-$CMAKE_OSX_ARCHITECTURES"
          export CC="/Applications/Xcode_16.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"
          export CXX="/Applications/Xcode_16.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++"
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)

          mkdir -p wheels

          PY_SHORT=$(echo "${{ matrix.python_version }}" | sed 's/\.//')
          DEPLOYMENT_TARGET=$(echo $MACOSX_DEPLOYMENT_TARGET | sed 's/\./_/g')

          wget https://github.com/Morton-Li/PyTorch-MacOS-Builder/releases/download/v${TORCH_VERSION}/torch-${TORCH_VERSION}-cp${PY_SHORT}-cp${PY_SHORT}-macosx_${DEPLOYMENT_TARGET}_${CMAKE_OSX_ARCHITECTURES}.whl

          python${{ matrix.python_version }} -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel numpy
          pip install torch-${TORCH_VERSION}-cp${PY_SHORT}-cp${PY_SHORT}-macosx_${DEPLOYMENT_TARGET}_${CMAKE_OSX_ARCHITECTURES}.whl
          pip install --force-reinstall cmake==3.31.6

          cd vision
          git clean -xfd

          python setup.py bdist_wheel

          cp dist/*.whl ../wheels/
          cd ..
          
          if [ "$(ls wheels/*.whl 2>/dev/null | wc -l)" -eq 0 ]; then
            echo "❌ No wheel built. Tag will not be created."
            exit 1
          fi

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vision-${{ env.VERSION }}-py${{ matrix.python_version }}-macosx-wheel
          path: wheels/*.whl

  release:
    needs: [build]
    runs-on: macos-15-intel
    name: Create release and upload wheels
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels
          merge-multiple: true

      - name: Create release and upload wheels
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: "TorchVision ${{ env.VERSION }} Release"
          files: wheels/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
